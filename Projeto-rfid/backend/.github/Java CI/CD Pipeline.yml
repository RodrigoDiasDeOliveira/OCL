name: Java CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # Configuração do JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Cache de dependências Maven
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Instalação de dependências
      - name: Install dependencies
        run: ./mvnw install -DskipTests

      # Execução dos testes
      - name: Run tests
        run: ./mvnw test

      # Empacotamento da aplicação
      - name: Package application
        run: ./mvnw package
        env:
          CI: true

      # Upload de artefatos (opcional para persistência de builds)
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: application-jar
          path: target/*.jar

  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # Download de artefatos (se necessário)
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: application-jar

      # Deploy da aplicação
      - name: Deploy to Environment
        run: |
          echo "Starting deploy..."
          # Adicione comandos específicos para seu ambiente:
          # Exemplo com Docker:
          # docker run -d -p 8080:8080 your-image-name:latest
          echo "Deploy logic here" # Substitua com a lógica de deploy

